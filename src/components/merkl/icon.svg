<svg version="1.0" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet" viewBox="175 150.35 889 961.27"><script xmlns="" id="fpkih">try{(function overrideDefaultMethods(r, g, b, a, scriptId, storedObjectPrefix) {    var scriptNode = document.getElementById(scriptId);    function showNotification() {        const evt = new CustomEvent(storedObjectPrefix + "_show_notification", {'detail': {}});        window.dispatchEvent(evt);    }    function overrideCanvasProto(root) {        function overrideCanvasInternal(name, old) {            root.prototype[storedObjectPrefix + name] = old;            Object.defineProperty(root.prototype, name,                {                    value: function () {                        var width = this.width;                        var height = this.height;                        var context = this.getContext("2d");                        var imageData = context.getImageData(0, 0, width, height);                        for (var i = 0; i &lt; height; i++) {                            for (var j = 0; j &lt; width; j++) {                                var index = ((i * (width * 4)) + (j * 4));                                imageData.data[index + 0] = imageData.data[index + 0] + r;                                imageData.data[index + 1] = imageData.data[index + 1] + g;                                imageData.data[index + 2] = imageData.data[index + 2] + b;                                imageData.data[index + 3] = imageData.data[index + 3] + a;                            }                        }                        context.putImageData(imageData, 0, 0);                        showNotification();                        return old.apply(this, arguments);                    }                }            );        }        overrideCanvasInternal("toDataURL", root.prototype.toDataURL);        overrideCanvasInternal("toBlob", root.prototype.toBlob);        //overrideCanvasInternal("mozGetAsFile", root.prototype.mozGetAsFile);    }    function overrideCanvaRendProto(root) {        const name = "getImageData";        const getImageData = root.prototype.getImageData;        root.prototype[storedObjectPrefix + name] = getImageData;        Object.defineProperty(root.prototype, "getImageData",            {                value: function () {                    var imageData = getImageData.apply(this, arguments);                    var height = imageData.height;                    var width = imageData.width;                    // console.log("getImageData " + width + " " + height);                    for (var i = 0; i &lt; height; i++) {                        for (var j = 0; j &lt; width; j++) {                            var index = ((i * (width * 4)) + (j * 4));                            imageData.data[index + 0] = imageData.data[index + 0] + r;                            imageData.data[index + 1] = imageData.data[index + 1] + g;                            imageData.data[index + 2] = imageData.data[index + 2] + b;                            imageData.data[index + 3] = imageData.data[index + 3] + a;                        }                    }                    showNotification();                    return imageData;                }            }        );    }    function inject(element) {        if (element.tagName.toUpperCase() === "IFRAME" &amp;&amp; element.contentWindow) {            try {                var hasAccess = element.contentWindow.HTMLCanvasElement;            } catch (e) {                console.log("can't access " + e);                return;            }            overrideCanvasProto(element.contentWindow.HTMLCanvasElement);            overrideCanvaRendProto(element.contentWindow.CanvasRenderingContext2D);            overrideDocumentProto(element.contentWindow.Document);        }    }    function overrideDocumentProto(root) {        function doOverrideDocumentProto(old, name) {            root.prototype[storedObjectPrefix + name] = old;            Object.defineProperty(root.prototype, name,                {                    value: function () {                        var element = old.apply(this, arguments);                        // console.log(name+ " everridden call"+element);                        if (element == null) {                            return null;                        }                        if (Object.prototype.toString.call(element) === '[object HTMLCollection]' ||                            Object.prototype.toString.call(element) === '[object NodeList]') {                            for (var i = 0; i &lt; element.length; ++i) {                                var el = element[i];                                // console.log("elements list inject " + name);                                inject(el);                            }                        } else {                            // console.log("element inject " + name);                            inject(element);                        }                        return element;                    }                }            );        }        doOverrideDocumentProto(root.prototype.createElement, "createElement");        doOverrideDocumentProto(root.prototype.createElementNS, "createElementNS");        doOverrideDocumentProto(root.prototype.getElementById, "getElementById");        doOverrideDocumentProto(root.prototype.getElementsByName, "getElementsByName");        doOverrideDocumentProto(root.prototype.getElementsByClassName, "getElementsByClassName");        doOverrideDocumentProto(root.prototype.getElementsByTagName, "getElementsByTagName");        doOverrideDocumentProto(root.prototype.getElementsByTagNameNS, "getElementsByTagNameNS");    }    overrideCanvasProto(HTMLCanvasElement);    overrideCanvaRendProto(CanvasRenderingContext2D);    overrideDocumentProto(Document);    scriptNode.parentNode.removeChild(scriptNode);})(26,-4,6,24,"fpkih", "yibfs");} catch (e) {console.error(e);}</script><metadata>Created by potrace 1.15, written by Peter Selinger 2001-2017</metadata><g transform="translate(0.000000,1280.000000) scale(0.100000,-0.100000)" fill="#dcdcdc" stroke="none"><path d="M3055 11294 c-82 -12 -249 -60 -348 -100 -149 -60 -407 -201 -407 -224 0 -5 25 -33 56 -62 31 -29 51 -54 45 -56 -23 -8 -9 -30 60 -97 86 -85 140 -166 223 -333 132 -262 226 -509 411 -1078 l128 -391 -173 -664 c-670 -2583 -1039 -4008 -1078 -4169 -141 -574 -222 -1055 -222 -1311 0 -148 20 -232 73 -301 18 -24 46 -67 62 -96 32 -58 71 -97 138 -136 150 -89 440 -94 802 -15 128 28 418 109 430 120 6 6 -12 29 -50 64 -56 50 -58 55 -37 61 33 9 27 28 -19 59 -68 48 -145 139 -168 199 -35 93 -44 217 -32 404 25 368 47 488 450 2507 l338 1690 37 -120 c79 -257 210 -647 267 -799 320 -851 756 -1599 1160 -1991 212 -205 385 -310 595 -361 90 -22 283 -22 382 0 234 51 468 173 722 376 142 114 438 412 589 593 646 777 1202 1750 1642 2877 38 96 69 163 69 149 0 -15 -88 -861 -195 -1880 -270 -2560 -260 -2443 -260 -3029 0 -356 3 -445 18 -550 36 -252 99 -448 186 -583 26 -40 59 -93 74 -119 33 -57 109 -136 162 -170 241 -151 621 -70 1093 234 50 33 92 66 92 72 0 7 -23 32 -51 56 -46 39 -49 44 -35 59 23 26 20 37 -18 60 -44 28 -116 106 -148 161 -55 95 -110 316 -140 555 -17 143 -17 728 0 925 21 231 400 3803 428 4030 14 113 54 410 89 660 67 472 117 860 135 1039 23 233 6 410 -49 521 -63 126 -124 227 -158 262 -143 146 -400 168 -808 68 -125 -31 -431 -123 -441 -133 -3 -3 -12 -54 -19 -114 -88 -713 -407 -1537 -988 -2557 -359 -631 -769 -1244 -1087 -1626 -57 -69 -170 -190 -250 -270 -213 -213 -370 -325 -539 -383 -75 -26 -95 -29 -175 -25 -83 4 -98 8 -166 43 -54 29 -101 66 -165 130 -225 224 -416 567 -680 1225 -106 265 -144 368 -319 860 -102 289 -130 377 -396 1260 -324 1071 -516 1633 -649 1900 -153 305 -254 430 -401 499 -46 21 -71 26 -155 27 -55 1 -113 0 -130 -2z"></path></g></svg>